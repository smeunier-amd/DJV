set(header
    AV.h
    AVSystem.h
    Audio.h
    AudioData.h
    AudioDataInline.h
    AudioInline.h
    AudioSystem.h
    Cineon.h
    Color.h
    ColorInline.h
    DPX.h
    Enum.h
    FontSystem.h
    FontSystemInline.h
    GLFWSystem.h
    IFF.h
    IO.h
    IOInline.h
    Image.h
    ImageConvert.h
    ImageData.h
    ImageDataInline.h
    ImageUtil.h
	OCIO.h
	OCIOSystem.h
    OpenGL.h
    OpenGLMesh.h
    OpenGLMeshCache.h
    OpenGLMeshInline.h
    OpenGLOffscreenBuffer.h
    OpenGLOffscreenBufferInline.h
    OpenGLShader.h
    OpenGLTexture.h
    OpenGLTextureAtlas.h
    OpenGLTextureInline.h
    PPM.h
    PointList.h
    PointListInline.h
    Pixel.h
    PixelInline.h
    RLA.h
    Render2D.h
    Render2DInline.h
    Render3D.h
    Render3DCamera.h
    Render3DCameraInline.h
    Render3DLight.h
    Render3DLightInline.h
    Render3DMaterial.h
    Render3DMaterialInline.h
    SGI.h
    SequenceIO.h
    Shader.h
    ShaderSystem.h
    Shape.h
    Tags.h
    Targa.h
    ThumbnailSystem.h
    TriangleMesh.h
    TriangleMeshInline.h)
set(source
    AVSystem.cpp
    Audio.cpp
    AudioData.cpp
    AudioSystem.cpp
    Cineon.cpp
    CineonRead.cpp
    CineonWrite.cpp
    Color.cpp
    DPX.cpp
    DPXRead.cpp
    DPXWrite.cpp
    Enum.cpp
    FontSystem.cpp
    GLFWSystem.cpp
    IFF.cpp
    IFFRead.cpp
    IO.cpp
    Image.cpp
    ImageConvert.cpp
    ImageData.cpp
    ImageUtil.cpp
	OCIO.cpp
	OCIOSystem.cpp
    OpenGLMesh.cpp
    OpenGLMeshCache.cpp
    OpenGLOffscreenBuffer.cpp
    OpenGLShader.cpp
    OpenGLTextureAtlas.cpp
    OpenGLTexture.cpp
    PPM.cpp
    PPMRead.cpp
    PPMWrite.cpp
    Pixel.cpp
    RLA.cpp
    RLARead.cpp
    Render2D.cpp
    Render3D.cpp
    Render3DCamera.cpp
    Render3DLight.cpp
    Render3DMaterial.cpp
    SequenceIO.cpp
    Shape.cpp
    Shader.cpp
    ShaderSystem.cpp
    SGI.cpp
    SGIRead.cpp
    Tags.cpp
    Targa.cpp
    TargaRead.cpp
    ThumbnailSystem.cpp
    TriangleMesh.cpp)
if(FFmpeg_FOUND)
    set(header
        ${header}
		FFmpeg.h
		FFmpegInline.h)
    set(source
        ${source}
		FFmpeg.cpp
		FFmpegRead.cpp)
endif()
if(JPEG_FOUND)
    set(header
        ${header}
        JPEG.h)
    set(source
        ${source}
        JPEG.cpp
        JPEGRead.cpp
        JPEGWrite.cpp)
endif()
if(PNG_FOUND)
    set(header
        ${header}
        PNG.h)
    set(source
        ${source}
        PNG.cpp
        PNGRead.cpp
        PNGWrite.cpp)
endif()
if(OpenEXR_FOUND)
    set(header
        ${header}
        OpenEXR.h)
    set(source
        ${source}
        OpenEXR.cpp
        OpenEXRRead.cpp
        OpenEXRWrite.cpp)
endif()
if(TIFF_FOUND)
    set(header
        ${header}
        TIFF.h)
    set(source
        ${source}
        TIFF.cpp
        TIFFRead.cpp
        TIFFWrite.cpp)
endif()

add_library(djvAV ${header} ${source})
set(LIBRARIES
    glad::glad
    glfw
    Freetype::Freetype
    IlmBase::Imath
    IlmBase::IlmThread
    OpenColorIO
    #OpenAL
    RtAudio::rtaudio
    OpenGL::GL
    djvCore)
if(FFmpeg_FOUND)
    set(LIBRARIES ${LIBRARIES} FFmpeg)
endif()
if(PNG_FOUND)
    set(LIBRARIES ${LIBRARIES} png)
endif()
if(OpenEXR_FOUND)
    set(LIBRARIES ${LIBRARIES} OpenEXR::IlmImf)
    target_compile_definitions(djvAV PUBLIC OpenEXR_FOUND)
endif()
if(TIFF_FOUND)
    set(LIBRARIES ${LIBRARIES} TIFF)
endif()
target_link_libraries(djvAV ${LIBRARIES})
if(JPEG_FOUND)
    target_link_libraries(djvAV ${JPEG_LIBRARIES})
    target_include_directories(djvAV PRIVATE ${JPEG_INCLUDE_DIR})
endif()
set_target_properties(
    djvAV
    PROPERTIES
    FOLDER lib
    CXX_STANDARD 11)

#install(
#    TARGETS djvAV
#    RUNTIME DESTINATION bin
#    LIBRARY DESTINATION lib
#    ARCHIVE DESTINATION lib)
#install(FILES ${header} DESTINATION include/djvAV)

